---
import type { MapLike } from 'typescript';
import Star from '../../components/Star.astro';
import { BUCKET_NAME, GOOGLE_API_URL, SITE_DESCRIPTION, SITE_TITLE } from '../../consts';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import AudioVisualiser from '../../components/AudioVisualiser.astro';
import Footer from '../../components/Footer.astro';


interface GCSItem {
  name: string;
  size: number;
  contentType: string;
  updated: string;
  metadata: Map<string,string>;
}

export async function getStaticPaths() {
  const response = await fetch(`${GOOGLE_API_URL}`);
  const data = await response.json();

  return data.items
    ? data.items
        .filter((item: GCSItem) => 
          item.name.endsWith('.mp3') || 
          item.name.endsWith('.m4a') ||
          item.name.endsWith('.wav')
        )
        .map((item: GCSItem) => {
          const slug = item.name.split('/').pop()!.replace(/\.[^/.]+$/, '');
          return {
            params: { slug },
            props: {
              audioUrl: `https://storage.googleapis.com/${BUCKET_NAME}/${item.name}`,
              fileName: item.name.split('/').pop()!,
              contentType: item.contentType,
              metadata: item.metadata,
            },
          };
        })
    : [];
}

const { audioUrl, fileName, contentType, metadata } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <BaseHead title={metadata["Title"] ?? "Audio Recording"} description={SITE_DESCRIPTION} />
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }
        h1 {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 2rem;
        }
        .audio-container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            padding: 2rem;
        }
        audio {
            width: 100%;
            margin-bottom: 1rem;
        }
        .error-message {
            color: #dc2626;
            margin-top: 1rem;
            padding: 1rem;
            background-color: #fee2e2;
            border-radius: 4px;
            display: none;
        }
        .background {
				position: absolute;
				width: 100vw;
				height: 100%;
				z-index: -1;
				background-color: rgb(250 250 250 / var(--tw-bg-opacity));
				background-image: url("/body-bg.svg");
				background-repeat: repeat;
			}
      .disclaimer {
        text-align: center;
        color: gray;
        font-size: small;
      }

    </style>
</head>
<body>
  <div class="background"/>
  <Star />

  <Header />
  <main transition:animate="slide" class="container">
    <h1 class="page-title">{metadata["Title"]}</h1>
    <AudioVisualiser audioURL={audioUrl} contentType={contentType} />
    <p class="disclaimer">Audio Generated by <span class="mesh-text">Google NotebookLM AI</span></p>
    <h4>Description</h4>
    <div>
      {metadata["Description"]}
    </div>
    <div>
      <a href="/audio-recordings"> Back to Recordings </a>
    </div>
  </main>
  <Footer />
</body>
</html> 