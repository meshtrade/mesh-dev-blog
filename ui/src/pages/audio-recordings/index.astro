---
import BaseHead from "../../components/BaseHead.astro";
import Footer from "../../components/Footer.astro";
import Header from "../../components/Header.astro";
import StraightUnderline from "../../components/StraightUnderline.astro";
import Underline from "../../components/Underline.astro";
import { SITE_DESCRIPTION, SITE_TITLE, GOOGLE_API_URL, BUCKET_NAME } from "../../consts";

interface GCSItem {
  name: string;
  size: number;
  contentType: string;
  updated: string;
  metadata: Map<string, string>;
}

interface Recording {
  name: string;
  url: string;
  size: number;
  contentType: string;
  updated: Date;
  metadata: any;
}

// Fetch the list of objects from the public bucket
const response = await fetch(`${GOOGLE_API_URL}`);
const data = await response.json();

// Process the files to get metadata
const recordings = data.items
  ? data.items
      .map((item: GCSItem) => ({
        name: item.name.split('/').pop()!,
        url: `https://storage.googleapis.com/${BUCKET_NAME}/${item.name}`,
        size: item.size,
        contentType: item.contentType,
        updated: new Date(item.updated),
        metadata: item.metadata,
      }))
      .sort((a: Recording, b: Recording) => b.updated.getTime() - a.updated.getTime())
  : [];
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio Recordings</title>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
            height: 90vh;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e5e5e5;
        }
        th {
            background-color: #f8f8f8;
            font-weight: 600;
        }
        tr:hover {
            background-color: #f8f8f8;
        }
        .background {
          position: absolute;
          width: 100vw;
          height: 100vh;
          z-index: -1;
          background-color: rgb(250 250 250 / var(--tw-bg-opacity));
          background-image: url("/body-bg.svg");
          background-repeat: repeat;
			  }
        .title-container {
          position: relative;
        }
        .underline-container {
				  position: absolute;
				  top: 60px;
				  left: 40%;
				  -webkit-transform: translateX(-30%);
				  transform: translateX(-30%);
			  }
    </style>
</head>
<body>
  <div class="background"/>
  <Header />
  <main class="container">
    <div class="title-container">
      <h1 class="page-title">Audio Recordings</h1>
    </div>
    <div class="underline-container">
      <StraightUnderline />
    </div>
    
    <div>
      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Date</th>
            <th>Size</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {recordings.map((recording: Recording) => (
            <tr>
              <td>{recording.metadata["Title"] ?? recording.name}</td>
              <td>{recording.updated.toLocaleDateString()}</td>
              <td>{(recording.size / 1024 / 1024).toFixed(2)} MB</td>
              <td>
                <a href={`/audio-recordings/${recording.name.split('/').pop()!.replace(/\.[^/.]+$/, '')}`}>
                  Listen
                </a>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </main>
  <Footer />
</body>
</html> 